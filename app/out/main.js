"use strict";var __importDefault=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.activate=void 0;const vscode_1=__importDefault(require("vscode")),ctxGlobal=global,statBarBut=vscode_1.default.window.createStatusBarItem(vscode_1.default.StatusBarAlignment.Left),ctxChannel=vscode_1.default.window.createOutputChannel("VSCContext"),modules=[];function activate({subscriptions:t,workspaceState:e}){const a="vsccontextscript.on",o=e.get(a,!1);statBarBut.command=a,statBarBut.show();const s=vscode_1.default.commands.registerCommand(a,(()=>{const t=e.get(a,!1);t?stop():run(),e.update(a,!t)}));t.push(statBarBut,ctxChannel,s,new vscode_1.default.Disposable(stop)),o?run():stop()}function run(){statBarBut.text="Ctx: ON",statBarBut.tooltip="Click to stop all scripts.";const t=vscode_1.default.workspace.workspaceFolders;if(t)for(const e of t){const t=vscode_1.default.workspace.getConfiguration("",e).get("contextScripts");if(t)for(const a of t){const t=`${e.uri.fsPath}/${a.path}`;delete require.cache[require.resolve(t)];const o=require(t);o.mName=a.name,modules.push(o);try{o.activate(a.parameters)}catch(t){ctxGlobal.ctxLog(`<<< ${a.name} activate error >>>:\n${t.toString()}`)}}}}function stop(){statBarBut.text="Ctx: OFF",statBarBut.tooltip="Click to run all scripts";for(const t of modules)try{t.deactivate?.()}catch(e){ctxGlobal.ctxLog(`<<< ${t.name} deactivate error >>>:\n${e.toString()}`)}modules.length=0}exports.activate=activate,ctxGlobal.ctxLog=(t,e=!0)=>{e?ctxChannel.appendLine(t):ctxChannel.append(t),ctxChannel.show(!0)};